#!/usr/local/bin/perl

use 5.010;

use strict;
use warnings FATAL => 'all';

use Data::Dump

$|=1;

use MooseX::Declare;
################################################################################
class Module::DependecyTree {
    use Config ();

    has qw(module       is rw isa Str required 1);
    has qw(os           is rw isa Str default Linux);
    has qw(perl_version is rw isa Str), default => $Config::Config{version};

    has qw(_deps_of is rw isa HashRef[ArrayRef]),
      default => sub { {} };

    method parse() {
        my $xml = $self->get_xml();
        my @dependencies = split /\s*<dependency>.*?\n/, $xml;
        shift @dependencies;

        my $mods = $self->get_mods(@dependencies);
        $self->_deps_of($self->get_deps_of($mods));
    }

    method get_mods(Str @dependencies) {
        my @mods;
        for (@dependencies) {
            my ($mod)     = /<module>(.*?)</;
            my ($depth)   = /<depth>(.*?)</;
            my ($is_core) = /<textresult>(.*?)</;

            next if $is_core;
            say
              "  " x $depth,
                "$mod ($depth)";
            push @mods, [ $mod, $depth ];
        }
        return \@mods;
    }

    method get_deps_of(ArrayRef[ArrayRef] $mods) {
        my %deps_of;
        for my $i (0..$#$mods) {
            my ($mother, $depth) = @{$mods->[$i]};
            $deps_of{$mother} = [];

            for my $j ($i+1..$#$mods) {
                my ($m, $d) = @{$mods->[$j]};
                push @{$deps_of{$mother}}, $m
                  if $d == $depth + 1;
                last
                  if $d <= $depth;
            }
        }
        return \%deps_of;
    }

    method install() {
        $self->install_($self->module, '', $self->_deps_of);
    }

    method install_($mod, $parent, $tree) {
        $self->install_($_, $mod, $tree)
          for @{$tree->{$mod}};
        say "Installing $mod", $parent ? " (prereq of $parent)" : '';
    }

    method print_tree($parent, $tree, $depth = 0) {
        say '  ' x $depth, "$parent ($depth)";
        print_tree($_, $tree, $depth+1)
          for @{$tree->{$parent}};
    }

    method get_xml() {
        return <<'EOXML';
<?xml version="1.0"?>
<cpandeps>
  <module>Moose</module>
  <perl>5.12.3</perl>
  <os>Linux</os>

  <dependency>
    <module>Moose</module>
    <depth>0</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Test::Requires</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>41</totalresults>
    <passes>41</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Test::More</module>
    <depth>2</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>ExtUtils::MakeMaker</module>
    <depth>2</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Package::DeprecationManager</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Params::Util</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>11</totalresults>
    <passes>11</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Scalar::Util</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>File::Spec</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>ExtUtils::CBuilder</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Sub::Install</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>14</totalresults>
    <passes>14</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Test::Fatal</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>11</totalresults>
    <passes>11</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Try::Tiny</module>
    <depth>3</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>37</totalresults>
    <passes>37</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>overload</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Exporter</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>List::MoreUtils</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>37</totalresults>
    <passes>37</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Package::Stash::XS</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>30</totalresults>
    <passes>30</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Sub::Exporter</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>14</totalresults>
    <passes>14</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Data::OptList</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>4</totalresults>
    <passes>4</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>MRO::Compat</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>33</totalresults>
    <passes>33</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Class::C3</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>29</totalresults>
    <passes>29</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Algorithm::C3</module>
    <depth>3</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>10</totalresults>
    <passes>9</passes>
    <fails>0</fails>
    <unknowns>1</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Task::Weaken</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>27</totalresults>
    <passes>27</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Eval::Closure</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>13</totalresults>
    <passes>13</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Package::Stash</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>31</totalresults>
    <passes>30</passes>
    <fails>0</fails>
    <unknowns>1</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Dist::CheckConflicts</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Sub::Name</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>36</totalresults>
    <passes>36</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Devel::GlobalDestruction</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>38</totalresults>
    <passes>38</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Scope::Guard</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>
  <chanceofsuccess>
    100%
  </chanceofsuccess>
  <debug></debug>
</cpandeps>
EOXML
    }
};
################################################################################
my $tree = Module::DependecyTree->new( module => 'Moose' );
$tree->parse;
say "===";
$tree->install;
