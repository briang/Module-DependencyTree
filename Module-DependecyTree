#!/usr/local/bin/perl

use 5.012;

use strict;
use warnings FATAL => 'all';

use Data::Dump

$|=1;

use MooseX::Declare;
################################################################################
class Module::DependecyTree::Module {
    use Moose::Util::TypeConstraints;
    use version;

    class_type 'version';
    coerce 'version'
      => from 'Str'
        => via { version->parse($_) };

    has qw(cpan_version      is ro isa version coerce 1 required 1);
    has qw(excuse            is ro isa Str), writer => '_set_excuse';
    has qw(installed_version is ro isa version|Undef coerce 1 required 1);
    has qw(is_installed      is ro isa Str);
    has qw(name              is ro isa Str required 1);
    has qw(required_for      is ro isa Str required 1);

    method needs_to_be_installed() {
        return 1 unless $self->is_installed;
        return $self->cpan_version > $self->installed_version;
    }
};

class Module::DependecyTree {
    use Config ();
    use File::Spec ();
    use Module::Extract::VERSION;
    use Moose::Util::TypeConstraints;
    use Parse::CPAN::Packages::Fast;

    # public attr

    has qw(cpandeps_url     is ro isa Str),
      default => 'http://deps.cpantesters.org/';
    has qw(module           is ro isa Str required 1);
    has qw(os               is ro isa Str default Linux);
    has qw(packages_details is ro isa Str required 1);
    has qw(perl_version     is ro isa Str), default => $Config::Config{version};

    # private attr

   #has qw(_dependencies    is rw isa HashRef[Module::DependecyTree::Module]), # XXX
    has qw(_dependencies    is rw isa HashRef),
      default => sub { {} };
    has qw(_packages_parser is rw);

    method BUILD {
        my $pp = Parse::CPAN::Packages::Fast->new(
            $self->packages_details
        );
        $self->_packages_parser($pp);
    }

    method build_cpandeps_url() {
        join '', $self->cpandeps_url,
          '?xml=1',
          ';module=', $self->module,
          ';perl=',   $self->perl_version,
          ';os=',     $self->os,
          ';pureperl=0';
    }

    method parse() {
        my $xml = $self->get_xml();
        my @dependencies = split /\s*<dependency>.*?\n/, $xml;
        shift @dependencies;

        my $mods = $self->get_modules(@dependencies);
        $self->_dependencies($self->get_dependencies_of($mods));
    }

    method get_modules(Str @dependencies) {
        my @mods;
        for (@dependencies) {
            my ($mod)     = /<module>(.*?)</;
            my ($depth)   = /<depth>(.*?)</;
            my ($is_core) = /<textresult>(.*?)</;

            next if $is_core;

            say "  " x $depth, "$mod ($depth)";
            push @mods, [ $mod, $depth ];
        }
        return \@mods;
    }

    method get_dependencies_of(ArrayRef[ArrayRef] $mods) {
        my %deps_of;
        for my $i (0..$#$mods) {
            my ($parent, $depth) = @{$mods->[$i]};
            $deps_of{$parent} = [];

            for my $j ($i+1..$#$mods) {
                my ($m, $d) = @{$mods->[$j]};
                if ($d == $depth + 1) {
                    my $mdm = Module::DependecyTree::Module->new(
                        name              => $m,
                        cpan_version      => $self->get_cpan_version($m),
                        installed_version => $self->get_installed_version($m),
                        is_installed      => !! $self->find_location_of($m),
                        excuse            => 'XXX',
                        required_for      => $parent,
                    );
                    #$mdm->make_excuse;
                    push @{$deps_of{$parent}}, $mdm;
                }
                last
                  if $d <= $depth;
            }
        }
        return \%deps_of;
    }

    method get_cpan_version(Str $mod) {
        my $parser = $self->_packages_parser;
        return $parser->package($mod)->version;
    }

    method get_installed_version(Str $mod) {
        my $path = $self->find_location_of($mod);
        return $path
               ? scalar Module::Extract::VERSION->parse_version_safely($path)
               : undef;
    }

    method find_location_of(Str $mod) {
        my $file .= "$mod.pm";
        $file =~ s{::}{/}g;

        for (@INC) {
            my $path = File::Spec->catfile($_, $file);
            return $path
              if -e $path;
        }
        return;
    }

    method install() {
        $self->install_($self->module, '', $self->_dependencies);
    }

    method install_(Str $mod, Str $parent, HashRef[ArrayRef] $tree) {
        $self->install_($_->name, $mod, $tree)
          for @{$tree->{$mod}};
        say "Installing $mod", $parent ? " (prereq of $parent)" : '';
    }

    method print_tree(Str $parent, Int $depth = 0) {
        say '  ' x $depth, "$parent ($depth)";
        $self->print_tree($_, $depth+1)
          for @{$self->_dependencies->{$parent}};
    }

    method get_xml() {
        return <<'EOXML';
<?xml version="1.0"?>
<cpandeps>
  <module>Moose</module>
  <perl>5.12.3</perl>
  <os>Linux</os>

  <dependency>
    <module>Moose</module>
    <depth>0</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Test::Requires</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>41</totalresults>
    <passes>41</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Test::More</module>
    <depth>2</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>ExtUtils::MakeMaker</module>
    <depth>2</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Package::DeprecationManager</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Params::Util</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>11</totalresults>
    <passes>11</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Scalar::Util</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>File::Spec</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>ExtUtils::CBuilder</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Sub::Install</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>14</totalresults>
    <passes>14</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Test::Fatal</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>11</totalresults>
    <passes>11</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Try::Tiny</module>
    <depth>3</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>37</totalresults>
    <passes>37</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>overload</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>Exporter</module>
    <depth>3</depth>
    <warning></warning>
    <textresult>Core module</textresult>
    <ispureperl>?</ispureperl>
    <totalresults>0</totalresults>
  </dependency>

  <dependency>
    <module>List::MoreUtils</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>37</totalresults>
    <passes>37</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Package::Stash::XS</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>30</totalresults>
    <passes>30</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Sub::Exporter</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>14</totalresults>
    <passes>14</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Data::OptList</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>4</totalresults>
    <passes>4</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>MRO::Compat</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>33</totalresults>
    <passes>33</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Class::C3</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>29</totalresults>
    <passes>29</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Algorithm::C3</module>
    <depth>3</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>10</totalresults>
    <passes>9</passes>
    <fails>0</fails>
    <unknowns>1</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Task::Weaken</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>27</totalresults>
    <passes>27</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Eval::Closure</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>13</totalresults>
    <passes>13</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Package::Stash</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>31</totalresults>
    <passes>30</passes>
    <fails>0</fails>
    <unknowns>1</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Dist::CheckConflicts</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Sub::Name</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>36</totalresults>
    <passes>36</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Devel::GlobalDestruction</module>
    <depth>1</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>38</totalresults>
    <passes>38</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>

  <dependency>
    <module>Scope::Guard</module>
    <depth>2</depth>
    <warning></warning>
    <textresult></textresult>
    <ispureperl>?</ispureperl>
    <totalresults>39</totalresults>
    <passes>39</passes>
    <fails>0</fails>
    <unknowns>0</unknowns>
    <nas>0</nas>
  </dependency>
  <chanceofsuccess>
    100%
  </chanceofsuccess>
  <debug></debug>
</cpandeps>
EOXML
    }
};
################################################################################
my $tree = Module::DependecyTree->new(
    module           => 'Moose',
    packages_details => '/mirrors/cpan/modules/02packages.details.txt.gz'
);
$tree->parse;
say "===";
$tree->install;
